#!/bin/bash
# User data script to be used in conjunction with an AWS EC2 instance and Amazon Linux AMI to launch a fully functional web based wiki system. 

# Initial system update
yum update -y

# Install packages
yum install -y php php-xml php-gd php-fpm wget

# Start and enable php-fpm
systemctl start php-fpm
systemctl enable php-fpm

# Installing and starting Nginx  
yum install -y nginx
systemctl start nginx
systemctl enable nginx

# Download Docuwiki
cd /tmp
wget https://download.dokuwiki.org/src/dokuwiki/dokuwiki-stable.tgz

# Clear web root 
rm -rf /usr/share/nginx/html/*

# Extract Docuwiki
tar -xzf dokuwiki-stable.tgz --strip-components=1 -C /usr/share/nginx/html/

# Create required data directories as specified by DocuWiki
mkdir -p /usr/share/nginx/html/data/{pages,meta,media,cache,index,locks,tmp,attic}
# Create /conf file to save installation settings
mkdir -p /usr/share/nginx/html/conf

# Set proper permissions so users can edit wiki pages
chown -R nginx:nginx /usr/share/nginx/html/
chmod -R 755 /usr/share/nginx/html/
chmod -R 777 /usr/share/nginx/html/data/
chmod -R 777 /usr/share/nginx/html/conf/

# Configure Nginx for PHP (official Docuwiki example)
cat > /etc/nginx/conf.d/dokuwiki.conf << 'EOF'
 
# PHP Handler
upstream php-handler {
    server unix:/run/php-fpm/www.sock;        # Correct path for Amazon Linux
}
 
# Actual configuration
server {
 
# BASICS 
    server_name default_server;     # optional: your domain name
    root        /usr/share/nginx/html;
    index       doku.php;
 
# NoSSL version 
    listen           80;            # IPv4
    listen      [::]:80;            # IPv6
 
# HEADERS 
    # Information "leaks"
    server_tokens       off;
    fastcgi_hide_header X-Powered_by;
 
# TWEAKS 
 
    client_max_body_size 4M;          # Maximum file upload size
    client_body_buffer_size 128k;
 
    location ~ ^/lib.*\.(js|css|gif|png|ico|jpg|jpeg|svg)$ {
        expires 365d;   # browser caching
    }
 
 
# RESTRICT ACCESS ######### ######### ######### ######### ######### ######### ##
    # Reference: https://www.dokuwiki.org/security#deny_directory_access_in_nginx
                 # TODO: Compare with this
 
 
    # Comment out while installing, then uncomment after setup
    # location ~ /(install.php) { deny all; }

    # After setup is complete, uncomment the install.php deny rule in /etc/nginx/conf.d/dokuwiki.conf
 
 
    # .ht             - .htaccess, .htpasswd, .htdigest, .htanything
    # .git, .hg, .svn - Git, Mercurial, Subversion.
    # .vs             - Visual Studio (Code)
    # All directories except lib.
    # All "other" files that you don't want to delete, but don't want public.
 
    location ~ /(\.ht|\.git|\.hg|\.svn|\.vs|data|conf|bin|inc|vendor|README|VERSION|SECURITY.md|COPYING|composer.json|composer.lock) {
        #return 404; # https://www.dokuwiki.org/install:nginx?rev=1734102057#nginx_particulars
        deny all;    # Returns 403
    }
 
 
# REDIRECT & PHP    
 
    location / {
        try_files $uri $uri/ @dokuwiki;
 
        # This means; where $uri is 'path', if 'GET /path' doesnt exist, redirect
        # client to 'GET /path/' directory. If neither, goto @dokuwiki rules.
    }
 
    location @dokuwiki {
        rewrite ^/_media/(.*) /lib/exe/fetch.php?media=$1 last;
        rewrite ^/_detail/(.*) /lib/exe/detail.php?media=$1 last;
        rewrite ^/_export/([^/]+)/(.*) /doku.php?do=export_$1&id=$2 last;
        rewrite ^/(.*) /doku.php?id=$1&$args last;
 
        # rewrites "doku.php/" out of the URLs if you set the userewrite
        # setting to .htaccess in dokuwiki config page
    }
 
    location ~ \.php$ {
        try_files $uri $uri/ /doku.php;
 
        include       fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param REDIRECT_STATUS 200;
        fastcgi_pass php-handler;
    }
}
EOF

# Remove default nginx config
rm -f /etc/nginx/conf.d/default.conf


# Nginx restart
systemctl restart nginx

# Create home page welcome message
cat > /usr/share/nginx/html/data/pages/start.txt << 'EOF' 
Welcome to this website, where you can learn about basics for AWS Services and Linux Commands 
EOF

# Create AWS notes page using Amazon documentation description for IAM, EC2, and S3 services
cat > /usr/share/nginx/html/data/pages/aws_notes.txt << 'EOF' 
Here is an overview of a few common AWS services:

- AWS Identity and Access Management (IAM) is a web service that helps you securely control access to AWS resources. With IAM, you can manage permissions that control which AWS resources users can access. You use IAM to control who is authenticated (signed in) and authorized (has permissions) to use resources. IAM provides the infrastructure necessary to control authentication and authorization for your AWS accounts.

- Amazon Elastic Compute Cloud (Amazon EC2) provides on-demand, scalable computing capacity in the Amazon Web Services (AWS) Cloud. Using Amazon EC2 reduces hardware costs so you can develop and deploy applications faster. You can use Amazon EC2 to launch as many or as few virtual servers as you need, configure security and networking, and manage storage. You can add capacity (scale up) to handle compute-heavy tasks, such as monthly or yearly processes, or spikes in website traffic. When usage decreases, you can reduce capacity (scale down) again.

- Amazon Simple Storage Service (Amazon S3) is an object storage service that offers industry-leading scalability, data availability, security, and performance. Customers of all sizes and industries can use Amazon S3 to store and protect any amount of data for a range of use cases, such as data lakes, websites, mobile applications, backup and restore, archive, enterprise applications, IoT devices, and big data analytics. Amazon S3 provides management features so that you can optimize, organize, and configure access to your data to meet your specific business, organizational, and compliance requirements.
EOF

# Create Linux commands page
cat > /usr/share/nginx/html/data/pages/linux_commands.txt << 'EOF' 
Here are some useful CLI commands to know:
- "cd" = change directory
- "ls" = list directory contents 
- "mkdir" = make directory 
- "mv" = move or rename files
- "cp" = copy file or directory
- "pwd" = print working directory
EOF


